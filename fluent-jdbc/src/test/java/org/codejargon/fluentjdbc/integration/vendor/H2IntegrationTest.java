package org.codejargon.fluentjdbc.integration.vendor;

import org.codejargon.fluentjdbc.api.mapper.Mappers;
import org.codejargon.fluentjdbc.api.query.UpdateResultGeneratedKeys;
import org.codejargon.fluentjdbc.integration.IntegrationTest;
import org.codejargon.fluentjdbc.integration.IntegrationTestRoutine;
import org.h2.jdbcx.JdbcDataSource;
import org.junit.*;
import org.junit.experimental.categories.Category;

import javax.sql.DataSource;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import static org.hamcrest.CoreMatchers.is;
import static org.junit.Assert.assertThat;

@Category(IntegrationTest.class)
public class H2IntegrationTest extends IntegrationTestRoutine {

    static Connection sentry;
    static DataSource h2DataSource;

    @BeforeClass
    public static void initH2() throws Exception {
        initH2DataSource();
        createTestTable(sentry);
    }

    @AfterClass
    public static void closeH2() {
        try {
            sentry.close();
        } catch (SQLException e) {
            throw new RuntimeException(e);
        }
    }

    @Test
    public void autoGeneratedKeysReturned() throws Exception {
        fluentJdbc.query().update("CREATE TABLE DUMMY_AUTO (id INTEGER PRIMARY KEY AUTO_INCREMENT, data VARCHAR(255));").run();
        UpdateResultGeneratedKeys<Long> result = query.update("INSERT INTO DUMMY_AUTO(DATA) VALUES('bla')").runAndFetchGenerated(
                Mappers.singleLong()
        );
        assertThat(result.generatedKeys().size(), is(1));
        assertThat(result.generatedKeys().get(0), is(1L));
    }

    private static void initH2DataSource() throws InstantiationException, IllegalAccessException, ClassNotFoundException, SQLException {
        Class.forName("org.h2.Driver").newInstance();
        JdbcDataSource ds = new JdbcDataSource();
        ds.setURL("jdbc:h2:mem:test/test");
        ds.setUser("sa");
        ds.setPassword("sa");
        h2DataSource = ds;
        // keep a connection open for the duration of the test
        sentry = ds.getConnection();
    }

    @Override
    protected DataSource dataSource() {
        return h2DataSource;
    }
}
